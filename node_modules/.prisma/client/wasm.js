
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  profileImage: 'profileImage',
  financialLevel: 'financialLevel',
  monthlyIncome: 'monthlyIncome',
  monthlyExpenses: 'monthlyExpenses',
  savingsGoal: 'savingsGoal',
  subscription: 'subscription',
  subscriptionStart: 'subscriptionStart',
  subscriptionEnd: 'subscriptionEnd',
  language: 'language',
  currency: 'currency',
  timezone: 'timezone',
  notifications: 'notifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  twoFactorBackupCodes: 'twoFactorBackupCodes',
  twoFactorEnabledAt: 'twoFactorEnabledAt',
  twoFactorDisabledAt: 'twoFactorDisabledAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  pushNotifications: 'pushNotifications',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  weeklyReports: 'weeklyReports',
  monthlyReports: 'monthlyReports',
  aiRecommendations: 'aiRecommendations',
  locationServices: 'locationServices',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  imageUrl: 'imageUrl',
  merchantName: 'merchantName',
  amount: 'amount',
  currency: 'currency',
  transactionDate: 'transactionDate',
  category: 'category',
  subcategory: 'subcategory',
  paymentMethod: 'paymentMethod',
  location: 'location',
  notes: 'notes',
  ocrConfidence: 'ocrConfidence',
  ocrRawText: 'ocrRawText',
  ocrProcessed: 'ocrProcessed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancialTestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  testVersion: 'testVersion',
  questions: 'questions',
  score: 'score',
  level: 'level',
  recommendations: 'recommendations',
  completedAt: 'completedAt'
};

exports.Prisma.AIInteractionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  interactionType: 'interactionType',
  userMessage: 'userMessage',
  aiResponse: 'aiResponse',
  model: 'model',
  tokensUsed: 'tokensUsed',
  responseTime: 'responseTime',
  isFinancialQuery: 'isFinancialQuery',
  queryCategory: 'queryCategory',
  disclaimerShown: 'disclaimerShown',
  disclaimerVersion: 'disclaimerVersion',
  userRating: 'userRating',
  userFeedback: 'userFeedback',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  shortDescription: 'shortDescription',
  category: 'category',
  subcategory: 'subcategory',
  price: 'price',
  currency: 'currency',
  originalPrice: 'originalPrice',
  discount: 'discount',
  providerId: 'providerId',
  providerName: 'providerName',
  providerLogo: 'providerLogo',
  images: 'images',
  videoUrl: 'videoUrl',
  duration: 'duration',
  level: 'level',
  features: 'features',
  requirements: 'requirements',
  whatYouWillLearn: 'whatYouWillLearn',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  totalSales: 'totalSales',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  isPopular: 'isPopular',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  orderNumber: 'orderNumber',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentGateway: 'paymentGateway',
  transactionId: 'transactionId',
  paymentStatus: 'paymentStatus',
  commission: 'commission',
  commissionRate: 'commissionRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorMessage: 'errorMessage',
  timestamp: 'timestamp'
};

exports.Prisma.SecurityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  severity: 'severity',
  timestamp: 'timestamp'
};

exports.Prisma.IPBlacklistScalarFieldEnum = {
  id: 'id',
  ipAddress: 'ipAddress',
  reason: 'reason',
  source: 'source',
  details: 'details',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.FinancialLevel = exports.$Enums.FinancialLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.Subscription = exports.$Enums.Subscription = {
  FREE: 'FREE',
  PERSONAL: 'PERSONAL',
  ADVANCED: 'ADVANCED',
  FAMILY: 'FAMILY',
  BUSINESS: 'BUSINESS'
};

exports.Language = exports.$Enums.Language = {
  SPANISH: 'SPANISH',
  ENGLISH: 'ENGLISH',
  FRENCH: 'FRENCH'
};

exports.Currency = exports.$Enums.Currency = {
  DOP: 'DOP',
  USD: 'USD',
  EUR: 'EUR',
  MXN: 'MXN',
  COP: 'COP'
};

exports.Theme = exports.$Enums.Theme = {
  LIGHT: 'LIGHT',
  DARK: 'DARK',
  AUTO: 'AUTO'
};

exports.ReceiptCategory = exports.$Enums.ReceiptCategory = {
  FOOD_AND_DRINKS: 'FOOD_AND_DRINKS',
  TRANSPORTATION: 'TRANSPORTATION',
  SHOPPING: 'SHOPPING',
  ENTERTAINMENT: 'ENTERTAINMENT',
  HEALTHCARE: 'HEALTHCARE',
  EDUCATION: 'EDUCATION',
  UTILITIES: 'UTILITIES',
  INSURANCE: 'INSURANCE',
  INVESTMENTS: 'INVESTMENTS',
  SAVINGS: 'SAVINGS',
  OTHER: 'OTHER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  DIGITAL_WALLET: 'DIGITAL_WALLET',
  CRYPTO: 'CRYPTO',
  OTHER: 'OTHER'
};

exports.AIInteractionType = exports.$Enums.AIInteractionType = {
  GENERAL_QUESTION: 'GENERAL_QUESTION',
  FINANCIAL_ADVICE: 'FINANCIAL_ADVICE',
  BUDGET_PLANNING: 'BUDGET_PLANNING',
  INVESTMENT_ADVICE: 'INVESTMENT_ADVICE',
  DEBT_MANAGEMENT: 'DEBT_MANAGEMENT',
  SAVINGS_STRATEGY: 'SAVINGS_STRATEGY',
  TAX_ADVICE: 'TAX_ADVICE',
  INSURANCE_ADVICE: 'INSURANCE_ADVICE',
  RETIREMENT_PLANNING: 'RETIREMENT_PLANNING',
  OTHER: 'OTHER'
};

exports.FinancialQueryCategory = exports.$Enums.FinancialQueryCategory = {
  BUDGETING: 'BUDGETING',
  SAVING: 'SAVING',
  INVESTING: 'INVESTING',
  DEBT: 'DEBT',
  TAXES: 'TAXES',
  INSURANCE: 'INSURANCE',
  RETIREMENT: 'RETIREMENT',
  CREDIT: 'CREDIT',
  BANKING: 'BANKING',
  CRYPTO: 'CRYPTO',
  REAL_ESTATE: 'REAL_ESTATE',
  BUSINESS_FINANCE: 'BUSINESS_FINANCE',
  EDUCATION_FINANCE: 'EDUCATION_FINANCE',
  OTHER: 'OTHER'
};

exports.ProductCategory = exports.$Enums.ProductCategory = {
  MENTORING: 'MENTORING',
  COURSE: 'COURSE',
  WORKSHOP: 'WORKSHOP',
  INSURANCE: 'INSURANCE',
  TOOL: 'TOOL',
  BOOK: 'BOOK',
  OTHER: 'OTHER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  COMPLETED: 'COMPLETED'
};

exports.PaymentGateway = exports.$Enums.PaymentGateway = {
  STRIPE: 'STRIPE',
  AZUL: 'AZUL',
  CARDNET: 'CARDNET',
  PAYPAL: 'PAYPAL',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  UserPreference: 'UserPreference',
  Receipt: 'Receipt',
  FinancialTest: 'FinancialTest',
  AIInteraction: 'AIInteraction',
  MarketplaceProduct: 'MarketplaceProduct',
  MarketplaceOrder: 'MarketplaceOrder',
  ProductReview: 'ProductReview',
  AuditLog: 'AuditLog',
  SecurityLog: 'SecurityLog',
  IPBlacklist: 'IPBlacklist'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
